# -*- coding: utf-8 -*-
"""Copy of Sudha 2 ex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WvCD5dUHcGSe1tBfjTbODHvb45SsFW9x
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df=pd.read_csv("garments_worker_productivity.csv")
print(df.head())

df.info

sns.countplot(df['no_of_workers'])

# for i in df['quarter']:
# #     print(i)
#     if i=="Quarter1":
#         i="1.0"
#     elif i=="Quarter2":
#         i="2.0"
# print(df['department'][1])
df['department']=df['department'].replace({'sweing':'1.0'})

df['department']=df['department'].replace('finishing','2.0')

df['department']=df['department'].replace('finishing ','2.0')
df['quarter'] = df['quarter'].replace({'Quarter1': '1.0'})
df['quarter'] = df['quarter'].replace({'Quarter2': '2.0'})
df['quarter'] = df['quarter'].replace({'Quarter3': '3.0'})
df['quarter'] = df['quarter'].replace({'Quarter4': '4.0'})
df['quarter'] = df['quarter'].replace({'Quarter5': '5.0'})

df['day']=df['day'].replace("Monday","10")
df['day']=df['day'].replace("Tuesday","20")
df['day']=df['day'].replace("Wednesday","30")
df['day']=df['day'].replace("Thursday","40")
df['day']=df['day'].replace("Friday","50")
df['day']=df['day'].replace("Saturday","60")
df['day']=df['day'].replace("Sunday","70")
# print("converted",df['quarter'])
print("converteed",df['day'])

df['quarter']=df['quarter'].astype(float)
df['department']=df['department'].astype(float)
df['day']=df['day'].astype(float)

df.replace("NaN","0.0")
df['wip']=df['wip'].replace("NaN")

df.isnull().sum()

df['wip'].replace([np.nan],df['wip'].mean,inplace=True)

df.isnull().sum()

df['date'] = pd.to_numeric(pd.to_datetime(df['date']))

df['wip'] = pd.to_numeric(df['wip'], errors='coerce')

np.isnan(df.any()) #and gets False
np.isfinite(df.all()) #and gets True

from sklearn.model_selection import train_test_split
X = df.drop(['wip'],axis=1)

y = df['no_of_workers']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

X.head()

X_train.shape

y_train.shape

from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
lab_enc = preprocessing.LabelEncoder()
training_scores_encoded = lab_enc.fit_transform(y_train)
text_scores_encoded = lab_enc.fit_transform(y_test)
# print(training_scores_encoded)
# print(utils.multiclass.type_of_target(y_train))
# print(utils.multiclass.type_of_target(y_train.astype('int')))
# print(utils.multiclass.type_of_target(training_scores_encoded))
# print(utils.multiclass.type_of_target(text_scores_encoded))

X_test.fillna(X_test.mean())



from sklearn import tree
clf=tree.DecisionTreeClassifier()
clf.fit(X_train, training_scores_encoded)
tree.plot_tree(clf)

text_representation = tree.export_text(clf)
print(text_representation)

from sklearn.metrics import confusion_matrix
y_pred=clf.predict(X_test)
# cf_mat=confusion_matrix(X_test,y_pred)
print(y_pred)
# # lab_enc.fit_transform(y_test)
# print(cf_mat)

from sklearn.metrics import precision_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
print("accuracy:",accuracy_score(text_scores_encoded,y_pred))
#  precision_recall_fscore_support(y_test, y_pred, average='macro')
print("Precision score:",precision_score(text_scores_encoded,y_pred,average='micro'))
print("recall score:",recall_score(text_scores_encoded,y_pred,average="micro"))

from sklearn.metrics import classification_report
print(classification_report(text_scores_encoded,y_pred))

from sklearn.metrics import confusion_matrix
7

conf_mat=confusion_matrix(y_true=y_test.round() ,y_pred=y_pred)
fig,ax=plt.subplots(figsize=(7.5,7.5))
ax.matshow(conf_mat,cmap=plt.cm.Blues,alpha=0.3)
for i in range(conf_mat.shape[0]):
    for j in range(conf_mat.shape[1]):
        ax.text(x=j,y=i,s=conf_mat[i,j],va='center',ha='center',size='xx-large')
plt.xlabel("prediction ",fontsize=28)
plt.ylabel("Actuals",fontsize=18)
plt.title("confustion matrix",fontsize=18)
plt.show()

import seaborn as sns
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)
f = sns.heatmap(cm, annot=True, fmt='d')



